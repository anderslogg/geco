#!/usr/bin/env python

""""
Postprocessing script to generate 2D density data sampled in a rectangle.
"""

import sys, os, csv
from fenics import *
from geco import *
from geco.models import Density2D
from mshr import *

# Parameters
nZ = 128

# Automatically determine the geometry
with open("ppdata.csv") as f:

    # Read CSV data into a dictionary
    rows = [r for r in csv.reader(f)]
    d = dict(zip(rows[0], rows[1]))

    # Get geometry
    try:
        r0 = float(d["r_inner"])
    except:
        r0 = 0.0
    rp = float(d["r_peak"])
    r1 = float(d["r_outer"])
    r = max(abs(rp - r0), abs(rp - r1))
    R = 1.5*r1
    Z = 1.5*r

# Read mesh and reconstruct 2D function space
filename = "mesh.xml.gz"
info("Reading mesh from file %s." % filename)
mesh2 = Mesh(filename)
V2 = FunctionSpace(mesh2, "Lagrange", 1)

# Create 2D density
RHO2 = Function(V2)

# Read density data
filename = [f for f in os.listdir('.') if "RHO_" in f and f.endswith('xml.gz')][0]
File(filename) >> RHO2
RHO2.set_allow_extrapolation(True)

# Create rectangle mesh
nR = int(float(R) / float(Z) * float(nZ))
mesh3 = RectangleMesh(Point(-R, -Z), Point(R, Z), nR, nZ)
info(mesh3)

# Create new 2D functon space
V3 = FunctionSpace(mesh3, "Lagrange", 1)

# Compute new 2D density
RHO3 = interpolate(Density2D(RHO2), V3)

# Save to file
RHO3.rename("RHO", "Density")
filename = "postprocess-2d-density.pvd"
File(filename) << RHO3
info("Postprocessing data save to file %s" % filename)
