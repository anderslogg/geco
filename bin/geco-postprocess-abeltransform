#!/usr/bin/env python

'''
geco-postprocess-abeltransform

USE:

    pip install --user PyAbel


A script to perform Abel transform.

Required file: RHO_R.xml.gz, mesh.xml.gz

Usage:

with setup.py installed in a docker container run

geco-postprocess-abeltransform

from the solution directory.

'''
#FIXME add a loop to work with multiple RHO components
#Add option run time option to allow choice between individual images or contact sheet
import numpy as np
import matplotlib.pyplot as plt
import sys, os
import argparse
from itertools import izip
import geco_utils as gu
import post_process as sol


def AbelTransform(r_max, res):
	subdir = os.getcwd()
	solution = sol.PostProcess(subdir, radius = r_max, resolution=res)

	#Building the quarter image into a full image
	density_ = [np.flipud(arr) for arr in solution.density_arrays]
	combined = [np.concatenate((arr,arr_), axis=0) for arr_, arr in izip(density_, solution.density_arrays)]
	full_density_arrays = [np.concatenate((np.fliplr(arr),arr), axis=1) for arr in combined]
	forward_abel = solution.forward_abel_transform()

	max_originals = [np.amax(arr) for arr in full_density_arrays]
	countours_orig = [np.linspace(0.1*m_o, m_o, 10) for m_o in max_originals]
	max_tforms = [np.amax(forw) for forw in forward_abel]
	countours_forw = [np.linspace(0.01*m_t, m_t, 10) for m_t in max_tforms]

	for ndx, d_arr in enumerate(full_density_arrays):
		plt.contour(d_arr, countours_orig[ndx], colors='white', linewidths = 0.3, extent=(-r_max,r_max,-r_max,r_max), alpha=1)
		plt.imshow(d_arr, cmap='gist_heat', extent=(-r_max,r_max,-r_max,r_max))
		plt.colorbar(format='%.0e')
		plt.savefig("Original " + solution.titles_for_plot[ndx] + ".png", bbox_inches='tight')
		plt.close()

		plt.contour(forward_abel[ndx], countours_forw[ndx], colors='white', linewidths = 0.3, extent=(-r_max,r_max,-r_max,r_max), alpha=1)
		plt.imshow(forward_abel[ndx], cmap='gist_heat',extent=(-r_max,r_max,-r_max,r_max))
		plt.colorbar(format='%.0e')
		plt.savefig("TForm " +  solution.titles_for_plot[ndx] + ".png", bbox_inches='tight')
		plt.close()


def main(args):
	parser = argparse.ArgumentParser()
	parser.add_argument('-r', '--resolution', help="enter desired resolution of numpy arrays",
	                        type=int, required=False, default=250)

	args=vars(parser.parse_args())

	file_list, dir_list = gu.FilesDirsByName('mesh.xml.gz')
	top = os.getcwd()

	r_max = gu.MaxSupport()
	AbelTransform(r_max, args['resolution'])

if __name__ == "__main__" :
    sys.exit(main(sys.argv))
