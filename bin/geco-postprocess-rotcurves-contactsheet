#!/usr/bin/env python

'''
geco-postprocess-rotation_curves

A script to compute velocity of particles as a function of radius

Required files: U_R.xml.gz, RHO_comp_i.xml.gz, mesh.xml.gz

Usage:

with setup.py installed in a docker container run

geco-postprocess-rotation_curves

from the directory that contains the solution directory(ies).
All subdirectories are assumed to have the same number of matter-species

'''
import matplotlib.pyplot as plt
import matplotlib.gridspec as gridspec
import geco_utils as gu

import os

cwd = os.getcwd()

dir_list = filter(os.path.isdir, os.listdir(os.getcwd()))
#dir_list.sort()
num_dirs = len(dir_list)

#Determine number of matter-species for layout purposes. Just checks the number
#species in the first directory and assumes the other solutions have the same
#number of species
#num_components = len([f for f in os.listdir(cwd+"/"+dir_list[0]) if (f.startswith('RHO_comp_') and (f.endswith('.xml.gz')))])
#print(num_components)

#FIXME - this shouldnt be hardcoded
num_components=2

fig = plt.figure(figsize=(10*num_components,num_dirs*5))
gs = gridspec.GridSpec(num_dirs, 4)



def rotation_curve(cur_dir):
    subdir = os.getcwd()

    mesh, parameters, components, U, V = gu.GatherFiles(subdir)
    if len(components) > 1:
        components.remove(components[0]) #remove the combined density plot

    rho_arrays = list(map(gu.ToNumpyArray, components))
    title_list = list(map(gu.GetTitle, parameters))

    r_max = gu.MaxSupport()
    for i in range(len(rho_arrays)):
        f = fig.add_subplot(gs[cur_dir,i])
        f.imshow(rho_arrays[i], cmap='gist_heat', origin='lower', extent=(0,r_max,0,r_max))
        f.set_title(title_list[i], fontsize=10)


    r_max *= 3

    rvals, inv_r, v = gu.RotationCurve(U,r_max)
    f = fig.add_subplot(gs[cur_dir,2:4])
    f.plot(rvals, v)
    f.plot(rvals[150:len(rvals)], inv_r[150:len(rvals)])

    f.set_title('Velocity vs. Radius')
    f.set_xlabel('radius')
    f.set_ylabel('velocity')
###########################################################3

for cur_dir in range(num_dirs):
    os.chdir(cwd+"/"+dir_list[cur_dir])
    rotation_curve(cur_dir)

os.chdir(cwd)
fig.savefig("rotation_curve.png")
