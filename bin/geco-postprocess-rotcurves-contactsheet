#!/usr/bin/env python

'''
geco-postprocess-rotation_curves

A script to compute velocity of particles as a function of radius

Required files: U_R.xml.gz, RHO_comp_i.xml.gz, mesh.xml.gz

Usage:

with setup.py installed in a docker container run

geco-postprocess-rotation_curves

from the directory that contains the solution directory(ies).
All subdirectories are assumed to have the same number of matter-species

'''
import sys
import geco_utils as gu
import argparse
import matplotlib.pyplot as plt
import matplotlib.gridspec as gridspec
import os
from itertools import izip
import post_process as sol



def RotationCurve(row,r_max,res, fig, gs):
    sub_dir = os.getcwd()
    solution = sol.PostProcess(sub_dir)

    for ndx, d_arr in enumerate(solution.density_arrays):
        f = fig.add_subplot(gs[row,ndx])
        f.imshow(d_arr, cmap='gist_heat', extent=(0,r_max,0,r_max))
        f.set_title(solution.titles_for_plot[ndx].split("-")[-1], fontsize=10)

        f = fig.add_subplot(gs[row,2*ndx+2:2*ndx+4])

        rvals = solution.radii[ndx]
        f.plot(rvals, solution.circular_velocity[ndx])

        f.set_title('Velocity vs. Radius')
        f.set_xlabel('radius')
        f.set_ylabel('velocity')

    if (len(solution.density_arrays) == 1):
        t = plt.text(-5*r_max, r_max/10, solution.parameter_str[0], fontsize=10)

###########################################################3


def main(args):
    parser = argparse.ArgumentParser()
    parser.add_argument('-r', '--resolution', help="enter desired resolution of numpy arrays",
                            type=int, required=False)
    args=vars(parser.parse_args())

    res = 500 if args['resolution'] is None else args['resolution']

    _, dir_list = gu.FilesDirsByName('mesh.xml.gz')

    #Set up figure and spacing
    fig = plt.figure(figsize=(14,len(dir_list)*3))
    gs = gridspec.GridSpec(len(dir_list)+2, 6)
    gs.update(wspace=0.75, hspace=0.75)

    r_max = gu.MaxSupport()
    top = os.getcwd()
    for row, sdir in enumerate(dir_list):
        os.chdir(sdir)
        RotationCurve(row,r_max, res, fig, gs)
        os.chdir(top)

    fig.savefig("rotation_curves.png")

if __name__ == "__main__" :
    sys.exit(main(sys.argv))
