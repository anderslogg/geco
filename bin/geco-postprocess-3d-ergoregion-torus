#!/usr/bin/env python

""""
Postprocessing script to generate 3D ergoregion data sampled in a torus.
"""

import sys, os, csv
from fenics import *
from geco import *
from geco.models import Density3D
from mshr import *

# Resolution
minimum_resolution = 400000

# Get or set parameters
if len(sys.argv) == 3:

    # Get input parameters
    R = float(sys.argv[1])
    r = float(sys.argv[2])

else:

    # Automatically determine the geometry
    with open("ppdata.csv") as f:

        # Read CSV data into a dictionary
        rows = [r for r in csv.reader(f)]
        d = dict(zip(rows[0], rows[1]))

        # Get geometry
        try:
            r0 = float(d["r_inner"])
        except:
            r0 = 0.0
        rp = float(d["r_peak"])
        r1 = float(d["r_outer"])
        r = max(abs(rp - r0), abs(rp - r1))
        R = 2.0*r1
        r = 0.9*r1

# Read mesh and reconstruct 2D function space
filename = "mesh.xml.gz"
info("Reading mesh from file %s." % filename)
mesh2 = Mesh(filename)
V2 = FunctionSpace(mesh2, "Lagrange", 1)

# Create 2D metric fields
NU = Function(V2)
BB = Function(V2)
WW = Function(V2)
UU = [NU, BB, WW]

# Read metric field data
fields = ["NU_", "BB_", "WW_"]
for i, prefix in enumerate(fields):
    filename = [f for f in os.listdir('.') if f.startswith(prefix) and f.endswith('xml.gz')][0]
    File(filename) >> UU[i]
    UU[i].set_allow_extrapolation(True)

# Create 3D torus mesh
info("Generating torus with R = %g and r = %g" % (R, r))
box = Box(Point(-R - r, -r, -R - r), Point(R + r, r, R + r))
sphere_inner = Sphere(Point(0, 0, 0), R - r)
sphere_outer = Sphere(Point(0, 0, 0), R + r)
geometry = box*sphere_outer - sphere_inner
mesh3 = generate_mesh(geometry, 16)
while mesh3.num_cells() < minimum_resolution:
    mesh3 = refine(mesh3)

# Create 3D functon space
V3 = FunctionSpace(mesh3, "Lagrange", 1)

# Compute 3D ergoregion
x = SpatialCoordinate(mesh2)
s = x[0]
_gtt = - exp(2.0*NU)*(1.0 - (WW*s*BB)**2.0*exp(-4.0*NU))
gtt  = project(_gtt, V2)
GTT = interpolate(Density3D(gtt), V3)

# Save to file
GTT.rename("GTT", "Ergoregion indicator")
filename = "postprocess-3d-ergoregion-torus.pvd"
File(filename) << GTT
info("Postprocessing data save to file %s" % filename)
