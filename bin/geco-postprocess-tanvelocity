#!/usr/bin/env python
'''
geco-postprocess-tanvelocity

A script to calculate tangential velocity

Required files: mesh.xml.gz, U_##.xdmf, RHO_comp_#_##.xdmf,
                data.csv, parameters_#.csv

Usage:

with setup.py installed in a docker container run

geco-postprocess-tanvelocity [-t] [-z]

-t  Optional user defined tolerance cutoff
    Default is relative to max value of RHO Components

-z  Optional user defined z axis value about which
    to calculate the rotation curve
    Default z = 0

from the solution directory.

'''
import argparse
from geco import *
import numpy as np
import matplotlib.pyplot as plt
import geco_utils as gu
import os
from dolfin import *
from itertools import izip



def vel_tangential(tol=0,zed=0):

    dir = os.getcwd()

    mesh, parameters, components, U, V = gu.GatherFiles(dir)
    components.remove(components[0]) #remove the combined density plot

    param_dict_list = list(map(gu.GetParametersDicts, parameters))


    r_max = gu.MaxSupport()
    res = 500
    for param_dict,rho in izip(param_dict_list, components):

        model,weight,name = gu.BuildTanVelModel(param_dict, U)

        #If the tolerance is not user defined, set it
        #based on the maximum value of the current RHO
        reset_tol=False
        if tol == 0:
            reset_tol = True
            nodal_values = rho.vector().get_local()
            tol = np.amax(nodal_values) * 0.001


        arr=gu.ToNumpyArray(rho, r_max, res)
        v_array = gu.TangentialVelocityArray(model,V,arr
                                            ,tol, r_max, res)

        arr = arr*(float(weight))
        v_array = v_array*(float(weight))

        plt.imshow(arr, cmap='gist_heat', extent=(0,r_max,0,r_max) , origin='lower')
        plt.title("RHO - " + name)
        plt.colorbar(format='%.0e')
        plt.savefig("RHO " + name)
        plt.close()


        plt.imshow(v_array, cmap='gist_heat', extent=(0,r_max,0,r_max), origin='lower')
        plt.title("Velocity - " + name)
        plt.colorbar(format='%.0e')
        plt.savefig("Velocity " + name)
        plt.close()

        v, inv_r, r_vals = gu.TangentialVelocityCurve(v_array, r_max)
        alpha = inv_r[1]*v[1]
        plt.plot(r_vals, v)
        plt.plot(r_vals[20:len(r_vals)], alpha*inv_r[20:len(r_vals)])
        plt.title('Velocity vs. Radius ' + name + '\n tolerance = {}'.format(tol))
        plt.xlabel('radius')
        plt.ylabel('velocity')
        plt.savefig("Rotation Curve" + name + ".png")
        plt.close()


        if reset_tol==True:
            tol=0
            reset_tol=False

    return ""


############################################################3

parser = argparse.ArgumentParser()
parser.add_argument('-t', '--tolerance', help="enter a tolerance cutoff",
                        type=float, required=False)
parser.add_argument('-z', '--zaxis', help="enter a z-axis ",
                        type=int, required=False)
args=vars(parser.parse_args())

tol = 0 if args['tolerance'] is None else args['tolerance']
zed = 0 if args['zaxis'] is None else args['zaxis']

vel_tangential(tol,zed)
