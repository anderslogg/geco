#!/usr/bin/env python

""""
Postprocessing script to generate 3D data from 2D data.

This script is a special version of geco-postprocess-volume
that uses a torus instead of a box (for computational efficiency).
"""

import sys, os
from fenics import *
from geco import *
from geco.models import Density3D
from mshr import *
from pkg_resources import resource_filename

# Program input
if len(sys.argv) != 4:
    print "Usage: geco-postprocess-torus R r n"
    print ""
    print "R = major radius"
    print "r = minor radius"
    print "n = number of refinements"
    exit(1)

# Get input parameters
R = float(sys.argv[1])
r = float(sys.argv[2])
n = int(sys.argv[3])

# Identify 2D RHO file
files = [f for f in os.listdir('.') if "RHO_" in f and f.endswith('xml.gz')]

# Check that we got exactly one file
if len(files) > 1:
    error("More than one XML file for RHO!")
elif len(files) == 0:
   error("Unable to find XML data for RHO.")

# Get data filename
data_filename = files[0]

# Read mesh and reconstruct 2D function space
mesh_filename = "mesh.xml.gz"
info("Reading mesh from file %s." % mesh_filename)
mesh2D = Mesh(mesh_filename)
V2D = FunctionSpace(mesh2D, "Lagrange", 1)

# Read data and reconstruct 2D function
RHO2D = Function(V2D)
File(data_filename) >> RHO2D

# Make sure we can evaluate at axis...
RHO2D.set_allow_extrapolation(True)

# # Read torus mesh
# mesh3d = Mesh(resource_filename("geco", "meshes/torus.xml"))

# # Refine torus mesh
# print "Refining reference torus mesh %d times..." % n
# for k in range(n):
#     mesh3d = refine(mesh3d)

# # Scale reference torus with R = 1 and r = 1/2
# print "Mapping reference torus to physical mesh..."
# coordinates = mesh3d.coordinates()
# for i, (x, y, z) in enumerate(coordinates):
#     rho = sqrt(x*x + y*y)
#     nx = x / rho
#     ny = y / rho
#     coordinates[i, 0] = R*nx + 2*r*(x - nx)
#     coordinates[i, 2] = R*ny + 2*r*(y - ny)
#     coordinates[i, 1] = 2*r*z

# Use mshr to create an approximate torus mesh
box = Box(Point(-R - r, -r, -R - r), Point(R + r, r, R + r))
sphere_inner = Sphere(Point(0, 0, 0), R - r)
sphere_outer = Sphere(Point(0, 0, 0), R + r)
geometry = box*sphere_outer - sphere_inner
mesh3d = generate_mesh(geometry, 16)

# Refine mesh
print "Refining mesh..."
for k in range(n):
    mesh3d = refine(mesh3d)

# Generate 3D density
V3D = FunctionSpace(mesh3d, "Lagrange", 1)
RHO3D = interpolate(Density3D(RHO2D), V3D)

# Save 3D density
filename = "postprocess-3d-density-torus.pvd"
File(filename) << RHO3D
info("Postprocessing data save to file %s" % filename)
