#!/usr/bin/env python

""""
Postprocessing script to generate 3D data from 2D data
"""

import sys, os
from fenics import *
from geco import *
from geco.models import Density3D

# Program input
if len(sys.argv) != 3:
    print "Usage: geco-postprocess-volume D N"
    print ""
    print "D = box size (float)"
    print "N = box resolution (integer)"
    exit(1)

# Save input parameters
D = int(sys.argv[1])
N = int(sys.argv[2])
print "Box size   D = %d" % D
print "Resolution N = %d" % N

# Identify 2D RHO file
files = [f for f in os.listdir('.') if "RHO_" in f and f.endswith('xml')]

# Check that we got exactly one file
if len(files) > 1:
    error("More than one XML file for RHO!")
elif len(files) == 0:
   error("Unable to find XML data for RHO.")

# Set data filename
data_filename = files[0]

# Set mesh filename
R = int(data_filename.split("RHO_")[1].split(".")[0])
mesh_filename = "mesh_%d.xml" % R

# Read mesh and reconstruct 2D function space
info("Reading mesh from file %s." % mesh_filename)
mesh2D = Mesh(mesh_filename)
V2D = FunctionSpace(mesh2D, "Lagrange", 1)

# Read data and reconstruct 2D function
RHO2D = Function(V2D)
File(data_filename) >> RHO2D

# Make sure we can evaluate at axis...
RHO2D.set_allow_extrapolation(True)

# Generate 3D density
info("Generating 3D data with box size %d and resolution %d" % (D, N))
mesh3d = BoxMesh(Point(-D, -D, -D), Point(D, D, D), N, N, N)
V3D = FunctionSpace(mesh3d, "Lagrange", 1)
RHO3D = interpolate(Density3D(RHO2D), V3D)

# Save 3D density
File("RHO3D_%d_%s.pvd" % (R, "postprocess") ) << RHO3D
info("RHO3D data saved to file RHO3D_%d_%s.pvd" % (R,"postprocess"))
