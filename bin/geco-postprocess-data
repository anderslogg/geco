#!/usr/bin/env python

'''

geco-postprocess-data

A script to obtain data from the computed solution. 

Usage: run from within the solution directory. 
 
'''

import os
from dolfin import *
from geco.solution import *
import numpy as np
import geco.physicalquantities as pq
from matplotlib import pyplot as plt

##############################
##############################
# Set up Directories
cwd = os.getcwd()
data_file = cwd + '/data.csv'

# Solution step in sequence
try:
    step = cwd.split('/')[-1].split('_')[-1]
except:
    step = 000
    pass

##############################
##############################
# Some functions

def get_data_index(data_file, data):
    "Returns the column number corresponding to data in the solution data_file"

    header = np.genfromtxt(data_file, max_rows = 1, dtype=str, delimiter=',').tolist()
    try:
        data_index = header.index(data)
        return data_index
    except ValueError:
        raise ValueError


def save_data(data_dict, cwd):
    "Save data to file"

    # Name of file
    filename = os.path.join(cwd, "ppdata.csv")
    info("Appending data to file %s." % filename)

    # Get keys
    keys = sorted(data_dict.keys())

    # Remove ppdata if it exists
    try:
        os.remove(filename)
    except OSError:
        pass    

    # Write header if not written before
    if not os.path.isfile(filename):
        f = open(filename, "w")
        f.write(",".join(str(k) for k in keys) + "\n")
        f.close()

    # Append data
    data_line=""
    for key in keys:
        val = data_dict[key]
        if isinstance(val, float):
            data_line += "%.16g" % val + ","
        else:
            data_line += str(val) + ","
    data_line = data_line.strip(",")

    f = open(filename, "a")
    f.write(data_line + "\n")
    f.close()

def print_data_dict(data_dict):
    for k in data_dict.keys():
        print(k, data_dict[k])    

    
##############################
##############################
# Read Data dictionary
header = np.genfromtxt(data_file, max_rows=1, delimiter=',', dtype=str)
data_lines = np.genfromtxt(data_file, delimiter=',', dtype=None)
data_lines = data_lines[-1]
ppdata = dict( zip(header, data_lines))

# Read some basic quantities from data dict
rad_of_supp = ppdata['radius_of_support']
E0 = ppdata['E0']
rest_mass = ppdata['rest_mass']
        
# Load metric functions
filename = [f for f in os.listdir(cwd) if f.startswith('NU_')][0]
R = filename.split('.')[0].split('_')[1]

# Read mesh and create function space
mesh = Mesh(cwd + '/mesh.xml.gz')
V = FunctionSpace(mesh, 'P', 1)

# Read and save fields and density
NU  = Function(V)
BB  = Function(V)
MU  = Function(V)
WW  = Function(V)
RHO = Function(V)
P00 = Function(V)
P11 = Function(V)
P33 = Function(V)
P03 = Function(V)
RMD = Function(V)
fields = [NU, BB, MU, WW, RHO, P00, P11, P33, P03]
field_names = ['NU', 'BB', 'MU', 'WW', 'RHO','P00', 'P11', 'P33', 'P03']

for f, fn in zip(fields, field_names):
    try:
        File('%s_%s.xml.gz' % (fn, R)) >> f
    except:
        pass

U = Solution(NU, BB, MU, WW, RHO, P00, P11, P33, P03, RMD, ppdata)

##############################
##############################
# Compute post-process data for desired variables

# Reflection plane radii of support
r_inner, r_peak, r_outer = pq.compute_reflection_plane_support(U)

# Mass aspect function
mass_aspect_max_r, mass_aspect_max = pq.compute_mass_aspect(U)

# Quantities measured at different radii
rvals = [0.0, r_inner, r_peak, r_outer, mass_aspect_max_r]
# Rcirc
Rcirc_0, Rcirc_i, Rcirc_p, Rcirc_o, Rcirc_MAmax = pq.compute_Rcirc_values(U, rvals)
# Scaled ZAMO Redshift
zamoZ_0, zamoZ_i, zamoZ_p, zamoZ_o, zamoZ_MAmax = pq.compute_sZAMO_redshift_values(U, rvals)
# Lapse
lapse_0, lapse_i, lapse_p, lapse_o, lapse_MAmax = pq.compute_lapse_values(U, rvals)

# Linear Energy density
linear_energy_density = pq.compute_linear_energy_density(U)

# Azimuthal pressure
azimuthal_pressure = pq.compute_azimuthal_pressure(U)

# Meridional pressure
meridional_pressure = pq.compute_meridional_pressure(U)

# Hakan's parameter
hakan_parameter = pq.compute_hakan_parameter(U)

# fractional_binding_energy
fractional_binding_energy = pq.compute_physical_quantity('fractional_binding_energy', U)

##############################
##############################
# Save post-process data along with original data from converged run

# Add newly computed post-process values
ppdata['fractional_binding_energy'] = fractional_binding_energy
ppdata['r_inner']               = r_inner
ppdata['r_peak']                = r_peak
ppdata['r_outer']               = r_outer
ppdata['Rcirc_inner']           = Rcirc_i
ppdata['Rcirc_peak']            = Rcirc_p
ppdata['Rcirc_outer']           = Rcirc_o
ppdata['Rcirc_max']             = Rcirc_MAmax
ppdata['mass_aspect_max']       = mass_aspect_max
ppdata['mass_aspect_max_r']     = mass_aspect_max_r
ppdata['lapse_0']               = lapse_0
ppdata['lapse_p']               = lapse_p
ppdata['lapse_i']               = lapse_i
ppdata['lapse_o']               = lapse_o
ppdata['lapse_MAmax']           = lapse_MAmax
ppdata['zamo_redshift_orig']    = zamoZ_0
ppdata['zamo_redshift_inner']   = zamoZ_i
ppdata['zamo_redshift_peak']    = zamoZ_p
ppdata['zamo_redshift_outer']   = zamoZ_o
ppdata['zamo_redshift_max']     = zamoZ_MAmax
ppdata['step']                  = step
ppdata['linear_energy_density'] = linear_energy_density
ppdata['azimuthal_pressure']    = azimuthal_pressure
ppdata['meridional_pressure']   = meridional_pressure
ppdata['hakan_parameter']       = hakan_parameter

# Save
save_data(ppdata, cwd)

# Print
#print_data_dict(ppdata_dict)



"""

##############################
##############################
# OLD VERSION


# Rcirc
x = SpatialCoordinate(mesh)
r = x[0]
z = x[1]
Rcirc_func = project(r*BB*exp(-NU), V)
Rcirc_peak = Rcirc_func(r_peak, 0.0)
Rcirc_outer = Rcirc_func(r_outer, 0.0)

# Mass aspect function
sres = 100
slist = np.linspace(0., rad_of_supp, sres)
masslist = []

for s in slist:
    g = Expression('s - x[0]', degree=1, s=s)
    eta = 2*2*pi*assemble(conditional(ge(g, 0), 1, 0)*RHO*r*dx(mesh)) # Doubled to account for quarter disk
    eta *= 2 # 2m/r, is less than 1 for regular solutions
    eta /= Rcirc_func(s, 0.0)
    masslist.append([s, eta])

maximum = max(masslist, key=lambda x: x[1])
Rcirc_max = Rcirc_func(maximum[0], 0.0)

# Lapse
lapse = project(exp(NU), V)
central_lapse = lapse(0,0)
peak_lapse    = lapse(r_peak, 0)


# zamo_Z, the scaled ZAMO redshift
if isinstance(r_outer, float):            
    zamo_Zo = 1.0 - exp(NU(r_outer, 0.0))
else:
    zamo_Zo = 0.0
if isinstance(r_peak, float):
    zamo_Zp = 1.0 - exp(NU(r_peak, 0.0))
else:
    zamo_Zp = 0.0
if isinstance(maximum[0], float):
    zamo_Zm = 1.0 - exp(NU(maximum[0], 0.0))
else:
    zamo_Zm = 0.0    

# Solution step in sequence
try:
    step = cwd.split('/')[-1].split('_')[-1]
except:
    step = 000
    pass
"""

