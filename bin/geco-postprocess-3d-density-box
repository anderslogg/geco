#!/usr/bin/env python

"""
Postprocessing script to generate 3D density data sampled in a box.

Usage: 
cd /demo_directory
geco-postprocess-3d-density-box -d 50 -r 32 -f RHO.xml

Arguments: 
    -d (--dimension). float. Specified number is half length of side of box.
    -r (--resolution). int. Number of cells per side of box. 
    -f (--file). str. XML file to be sampled. 
"""

import sys, os
import argparse
from dolfin import *
from geco import *
from geco.models import Density3D



# Program Input
parser = argparse.ArgumentParser()
parser.add_argument('-d', '--dimension', help="enter box size over 2",
                        type=float, required=True)
parser.add_argument('-r', '--resolution', help="enter box resolution ",
                        type=int, required=True)
parser.add_argument('-f', '--file', help="enter file name ",
                        type=str, required=False)                        
args=vars(parser.parse_args())
   
rhofile = 'RHO' if args['file'] is None else args['file']    
D = args['dimension']   
N = args['resolution']   

# Identify 2D RHO file
files = [f for f in os.listdir('.') if rhofile in f and f.endswith('xml.gz')]

# Check that we got exactly one file
if len(files) > 1:
    error("More than one XML file for RHO!")
elif len(files) == 0:
   error("Unable to find XML data for RHO.")

# Get data filename
data_filename = files[0]

# Read mesh and reconstruct 2D function space
mesh_filename = "mesh.xml.gz"
info("Reading mesh from file %s." % mesh_filename)
mesh2D = Mesh(mesh_filename)
V2D = FunctionSpace(mesh2D, "Lagrange", 1)

# Read data and reconstruct 2D function
RHO2D = Function(V2D)
File(data_filename) >> RHO2D

# Make sure we can evaluate at axis...
RHO2D.set_allow_extrapolation(True)

# Generate 3D density
info("Generating 3D data with box size %g and resolution %d" % (D, N))
mesh3d = BoxMesh(Point(-D, -D, -D), Point(D, D, D), N, N, N)
V3D = FunctionSpace(mesh3d, "Lagrange", 1)
RHO3D = interpolate(Density3D(RHO2D), V3D)

# Save 3D density
filename = "postprocess-3d-density-box_{}.pvd".format(data_filename.split(".")[0])
File(filename) << RHO3D
info("Postprocessing data save to file %s" % filename)
