#!/usr/bin/env python

"""
Postprocessing script to generate 3D density data sampled in a box.
"""

import os
import sys

from fenics import *
from geco import *
from geco.models import Density3D

# Program input
if len(sys.argv) != 3:
    print("Usage: geco-postprocess-3d-density-box D N")
    print("")
    print("D = box size / 2 (float)")
    print("N = box resolution (integer)")
    exit(1)

# Get input parameters
D = float(sys.argv[1])
N = int(sys.argv[2])

# Identify 2D RHO file
files = [f for f in os.listdir('.') if "RHO_" in f and f.endswith('xml.gz')]

# Check that we got exactly one file
if len(files) > 1:
    error("More than one XML file for RHO!")
elif len(files) == 0:
   error("Unable to find XML data for RHO.")

# Get data filename
data_filename = files[0]

# Get radius
R = int(data_filename.split("RHO_")[1].split(".")[0])

# Read mesh and reconstruct 2D function space
mesh_filename = "mesh.xml.gz"
info("Reading mesh from file %s." % mesh_filename)
mesh2D = Mesh(mesh_filename)
V2D = FunctionSpace(mesh2D, "Lagrange", 1)

# Read data and reconstruct 2D function
RHO2D = Function(V2D)
File(data_filename) >> RHO2D

# Make sure we can evaluate at axis...
RHO2D.set_allow_extrapolation(True)

# Generate 3D density
info("Generating 3D data with box size %g and resolution %d" % (D, N))
mesh3d = BoxMesh(Point(-D, -D, -D), Point(D, D, D), N, N, N)
V3D = FunctionSpace(mesh3d, "Lagrange", 1)
RHO3D = interpolate(Density3D(RHO2D.cpp_object()), V3D)

# Save 3D density
filename = "postprocess-3d-density-box.pvd"
File(filename) << RHO3D
info("Postprocessing data save to file %s" % filename)
